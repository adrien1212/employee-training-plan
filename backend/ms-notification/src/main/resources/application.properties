spring.application.name=notification
server.port=8010

eureka.client.register-with-eureka=true
eureka.client.service-url.default-zone=${EUREKA_SERVER:http://localhost:8761/eureka}

core-backend.base-url=http://host.docker.internal:8080

spring.datasource.url=jdbc:mysql://host.docker.internal:3306/db_training_plan_notification
spring.datasource.username=root
spring.datasource.password=root
# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# Logging SQL queries (optional)
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

spring.rabbitmq.host=${RABBIT_HOST:host.docker.internal}
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/

# Par defaut, si une erreur se produit, le message est repositionï¿½ en boucle dans la queue
# Nous si erreur, on veut pas le mettre
spring.rabbitmq.listener.direct.default-requeue-rejected=false

rabbitmq.exchange.commands=notification.commands
rabbitmq.queues.session-enrollment=notification.queue.session-enrollment
rabbitmq.queues.trainer=notification.queue.trainer

rabbitmq.routing-keys.session-enrollment=notification.session-enrollment
rabbitmq.routing-keys.trainer=notification.trainer

rabbitmq.exchange.email=email.exchange
rabbitmq.routing.key.email=email

# Logging configuration
logging.level.fr.adriencaubel.trainingplan.emailservice=INFO
logging.level.org.springframework.amqp=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.group.custom.show-components=always
management.endpoint.health.group.custom.show-details=always

####################################
# 1) Resource Server Configuration #
####################################
# Validate incoming JWTs (from Gateway / end user)
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER:http://host.docker.internal:7980/realms/employee-training-plan}

################################
# 2) OAuth2 Client Registration #
# Car nous devons appeler des endpoint du core-app
################################
# ----- OAuth2 provider (Keycloak realm) -----
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER:http://host.docker.internal:7980/realms/employee-training-plan}

# ----- OAuth2 client registration for the notification service -----
spring.security.oauth2.client.registration.notification-service.provider=keycloak
spring.security.oauth2.client.registration.notification-service.client-id=notification-service
spring.security.oauth2.client.registration.notification-service.client-secret=VUHjq2CAfE3dBW1lMysd7jPcwCzv25O5
spring.security.oauth2.client.registration.notification-service.authorization-grant-type=client_credentials