version: '3.8'

services:
  discovery:
    build:
      context: ./backend/discovery
      dockerfile: Dockerfile
    container_name: discovery
    restart: always
    ports:
      - "8761:8761"
    networks:
      - app-network
  gateway:
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    container_name: gateway
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - discovery
      - notification
      - keycloak
    environment:
       - EUREKA_SERVER=http://discovery:8761/eureka
       - KEYCLOAK_ISSUER=https://auth.traino.cloud/realms/employee-training-plan
       - NOTIFICATION_SERVICE_URL=http://notification:8010
       - CORE_SERVICE_URL=http://backend:8081
    networks:
      - app-network
  notification:
    build:
      context: ./backend/ms-notification
      dockerfile: Dockerfile
    container_name: ms-notification
    restart: always
    depends_on:
      - mysql
      - rabbitmq
      - discovery
    ports:
      - "8010:8010"
    environment:
       - EUREKA_SERVER=http://discovery:8761/eureka
       - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/db_training_plan_notification
       - RABBIT_HOST=rabbitmq
       - KEYCLOAK_ISSUER=http://auth.traino.cloud/realms/employee-training-plan
    networks:
      - app-network
  email:
    build:
      context: ./backend/email-service
      dockerfile: Dockerfile
    container_name: email-service
    restart: always
    depends_on:
      - rabbitmq
    ports:
      - "8078:8078"
    environment:
       - MAIL_HOST=mailhog
       - RABBIT_HOST=rabbitmq
    networks:
      - app-network
  backend:
    build:
      context: ./backend/employee-training-plan
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    depends_on:
      - mysql
      - rabbitmq
      - discovery
    environment:
      - EUREKA_SERVER=http://discovery:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/db_training_plan
      - RABBIT_HOST=rabbitmq
      - KEYCLOAK_SERVER_URL=https://auth.traino.cloud
      - KEYCLOAK_SERVER_USERNAME=${KEYCLOAK_ADMIN}
      - KEYCLOAK_SERVER_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KEYCLOAK_ISSUER=https://auth.traino.cloud/realms/employee-training-plan
      - SK_STRIPE_API_KEY=${SK_STRIPE_API_KEY}
      - WHSEC_STRIPE_WEBHOOK=${WHSEC_STRIPE_WEBHOOK}
      - MONGODB_HOST=mongo
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "81:80"  # You can change to 443 or use a reverse proxy like Nginx
    environment:
      - VITE_KEYCLOACK_URL=https://auth.traino.cloud:7980
      - VITE_BACKEND_API_URL=https://api.traino.cloud
    networks:
      - app-network
    depends_on:
      - backend
  mysql:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_training_plan
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network

  mongo:
    image: mongo:8.0.9
    container_name: mongo_container
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: training-plan
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network

  mongo-express:
    image: mongo-express
    ports:
      - "27016:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongo:27017/
      ME_CONFIG_BASICAUTH: false

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_container
    restart: always
    ports:
      - "5672:5672"    # AMQP protocol port
      - "15672:15672"  # Management UI port
    networks:
    - app-network

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - "1025:1025"
      - "8025:8025"
    environment:
      - MAIL_HOST=ssl0.ovh.net
      - MAIL_PORT=587
      - MAIL_USERNAME=noreply@traino.cloud
      - MAIL_PASSWORD=HNvyNqS4vL2TIvDj
    networks:
      - app-network

  keycloak:
    container_name: keycloak.openid-provider
    image: quay.io/keycloak/keycloak:25.0.1
    command:
      - start
      - --import-realm
    ports:
      - 7980:8080
    volumes:
      - keycloak-data:/opt/keycloak/data     # persist everything under /opt/keycloak/data
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_LOGLEVEL: true
      KC_HTTP_PORT: 8080
      KC_HOSTNAME: auth.traino.cloud
      KC_HOSTNAME_URL: https://auth.traino.cloud                # register 127.0.0.1 keycloak in /etc/hosts
      KC_HOSTNAME_ADMIN_URL: https://auth.traino.cloud
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KEYCLOAK_PROXY: edge
      # KC_PROXY_ADDRESS_FORWARDING: true
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_DEBUG: true
      KC_PROXY_HEADERS: "xforwarded"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live' ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - reverse-proxy
      - app-network

volumes:
  mysql-data:
  mongo-data:
  keycloak-data:

networks:
  reverse-proxy:
    external: true
  app-network:
    driver: bridge
